var express = require('express');
const { Purchase, Purchaseitem, Good, Supplier } = require('../models');
const { Sequelize } = require('sequelize');
const { Op } = require('sequelize');
const { isLoggedIn, RpInd } = require('../helper/util');
var router = express.Router();


//list
router.get('/', function (req, res, next) {
  res.render('purchases/list', { title: 'Purchases' })
});

router.get('/', isLoggedIn, async function (req, res, next) {
  try {
    let { page = 1, query = '', sortBy = 'invoice', sortMode = 'asc', limit = 3 } = req.query

    const params = {};

    //searching
    if (query) {
      params['where'] = {
        ...params.where,
        [Op.or]: [
          { name: { [Op.iLike]: `%${query}%` } },
          { address: { [Op.iLike]: `%${query}%` } },
          { phonecharacter: { [Op.iLike]: `%${query}%` } }
        ]
      };
    }

    // //pagination
    limit = Number(limit)
    const offset = limit * (page - 1);
    const count = await Purchase.count(params);
    const pages = Math.ceil(count / limit)

    // //sorting
    params['order'] = [
      [sortBy, sortMode == 'asc' ? 'ASC' : 'DESC']
    ]

    params['limit'] = limit
    params['offset'] = offset

    const purchases = await Purchase.findAll(params);
    res.status(200).json(
      {
        data: purchases,
        sortBy,
        sortMode,
        limit,
        offset,
        count,
        pages
      })
  } catch (e) {
    console.log(e);
    res.status(500).json({ message: e.message })
  }
});

//form
router.get('/add', isLoggedIn, async function (req, res, next) {
  const goods = await Good.findAll();
  const suppliers = await Supplier.findAll();
  const purchases = await Purchase.findAll();
  const purchaseitems = await Purchaseitem.findAll();
  res.render('purchases/form', {
    title: 'Purchases',
    data: {},
    goods,
    suppliers,
    purchases,
    purchaseitems,
    name: req.session.user.name,
    RpInd
  })
});

//invoice
router.get('/add/generate-invoice/', async (req, res) => {
  try {
    const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const prefix = `INV-${today}-`;
    
    const result = await Purchase.findOne({
      where: {
        invoice: {
          [Op.like]: `${prefix}%`
        }
      },
      attributes: [
        [Sequelize.fn('MAX', Sequelize.literal(`SUBSTRING(invoice, ${prefix.length + 1})`)), 'maxNum']
      ],
      raw: true
    });

    const nextNum = result.maxNum ? parseInt(result.maxNum) + 1 : 1;
    res.json(`${prefix}${nextNum}`);
  } catch (error) {
    console.error('Error generating invoice:', error);
    res.status(500).json({ error: 'Failed to generate invoice' });
  }
});

//barcode
router.get('/:barcode', async (req, res) => {
  try {
    const item = await Good.findByPk(req.params.barcode);
    if (!item) return res.status(404).json({ error: 'Item not found' });
    res.json(item);
  } catch (error) {
    console.error('Error fetching item:', error);
    res.status(500).json({ error: 'Failed to fetch item' });
  }
});

// Create new purchase
router.post('/', async (req, res) => {
  try {
    const { operator, supplierId } = req.body;
    
    // The invoice will be generated by the trigger function
    const purchase = await Purchase.create({
      operator,
      supplierId
    });
    
    res.status(201).json(purchase);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Add item to purchase
router.post('/:invoice/items', async (req, res) => {
  try {
    const { invoice } = req.params;
    const { itemcode, quantity } = req.body;
    console.log(req.body)
    
    // The purchaseprice and totalprice will be calculated by the trigger function
    const item = await Purchaseitem.create({
      invoice,
      itemcode,
      quantity
    });
    
    res.status(201).json(item);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get purchase details
router.get('/:invoice', async (req, res) => {
  try {
    const { invoice } = req.params;
    const purchase = await Purchase.findOne({
      where: { invoice },
      include: [
        { model: Purchaseitem, include: [Good] },
        { model: Supplier }
      ]
    });
    
    if (!purchase) {
      return res.status(404).json({ error: 'Purchase not found' });
    }
    
    res.json(purchase);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// router.post('/add', isLoggedIn, async function (req, res, next) {
//   try {
//     const { invoice, time, operator, totalsum, supplier, itemcode, quantity, purchaseprice, totalprice } = req.body;

//     console.log('purchases', req.body)

//     // const purchases = await Purchase.create({ invoice, time, operator, totalsum, supplier });
//     // const purchaseitems = await Purchaseitem.create({ invoice, itemcode, quantity, purchaseprice, totalprice });
//     console.log(req.body)

//     res.status(201).json({
//       dataPurchase: purchases,
//       dataPurchaseitem: purchaseitems
//     });
//   } catch (e) {
//     console.log(e);
//   }
// });

// router.get('/edit/:id', isLoggedIn, async (req, res, next) => {
//   try {
//     const Purchase = await Purchase.findByPk(req.params.id);

//     if (!Purchase) {
//       console.log('Purchase not found');
//     }

//     res.render('purchases/form', {
//       data: Purchase
//     });
//   } catch (err) {
//     console.error(err);
//   }
// });

// router.post('/edit/:id', isLoggedIn, async (req, res, next) => {
//   try {
//     const { name, address, phonecharacter } = req.body;
//     const { id } = req.params;

//     const [updatedRows] = await Purchase.update({ name, address, phonecharacter }, { where: { PurchaseId: id } });

//     if (updatedRows === 0) {
//       console.log('error', 'Purchase not found');
//     } else {
//       console.log('success', 'Purchase updated successfully');
//     }

//     res.redirect('/purchases');

//   } catch (err) {
//     console.error(err);
//     res.redirect('/purchases');
//   }
// });

// router.get('/delete/:id', isLoggedIn, async (req, res, next) => {
//   try {
//     const PurchaseId = req.params.id;

//     await Purchase.destroy({
//       where: {
//         unit: PurchaseId
//       }
//     });

//     res.redirect('/purchases');
//   } catch (err) {
//     console.error('Error deleting unit:', err);
//     next(err);
//   }
// });

module.exports = router;